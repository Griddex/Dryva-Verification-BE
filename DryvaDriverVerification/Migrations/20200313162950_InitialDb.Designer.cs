// <auto-generated />
using System;
using DryvaDriverVerification.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DryvaDriverVerification.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200313162950_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DryvaDriverVerification.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DriversAddressLine1");

                    b.Property<string>("DriversAddressLine2");

                    b.Property<string>("DriversCity");

                    b.Property<string>("DriversCountry");

                    b.Property<string>("DriversPostalCode");

                    b.Property<string>("DriversState");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("NameFK");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NameFK")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DriversEmail")
                        .IsRequired();

                    b.Property<int>("DriversHomeAddressFK");

                    b.Property<DateTime>("DriversLicenseExpiryDate");

                    b.Property<string>("DriversLicenseNo")
                        .IsRequired();

                    b.Property<string>("DriversMobile")
                        .IsRequired();

                    b.Property<int>("DriversPermanentAddressFK");

                    b.Property<int>("NameFK");

                    b.HasKey("DriverId");

                    b.HasIndex("DriversHomeAddressFK")
                        .IsUnique();

                    b.HasIndex("DriversPermanentAddressFK")
                        .IsUnique();

                    b.HasIndex("NameFK")
                        .IsUnique();

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.DriverData", b =>
                {
                    b.Property<Guid>("DriverDataId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("DriverFK");

                    b.Property<int>("EngineFluidLevelsFK");

                    b.Property<int>("ExteriorChecksFK");

                    b.Property<int>("InspectorFK");

                    b.Property<int>("InteriorChecksFK");

                    b.Property<int?>("ManagedById");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<int>("NextOfKinFK");

                    b.Property<int>("OwnerFK");

                    b.Property<int?>("RegisteredById");

                    b.Property<int>("SafetyTechnicalFK");

                    b.Property<string>("UserId");

                    b.Property<int>("VehicleFK");

                    b.HasKey("DriverDataId");

                    b.HasIndex("DriverFK")
                        .IsUnique();

                    b.HasIndex("EngineFluidLevelsFK")
                        .IsUnique();

                    b.HasIndex("ExteriorChecksFK")
                        .IsUnique();

                    b.HasIndex("InspectorFK")
                        .IsUnique();

                    b.HasIndex("InteriorChecksFK")
                        .IsUnique();

                    b.HasIndex("ManagedById");

                    b.HasIndex("NextOfKinFK")
                        .IsUnique();

                    b.HasIndex("OwnerFK")
                        .IsUnique();

                    b.HasIndex("RegisteredById");

                    b.HasIndex("SafetyTechnicalFK")
                        .IsUnique();

                    b.HasIndex("VehicleFK")
                        .IsUnique();

                    b.ToTable("Data");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.EngineFluidLevels", b =>
                {
                    b.Property<int>("EngineFluidLevelsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BatteryCharge");

                    b.Property<bool>("BrakeFluidLevel");

                    b.Property<bool>("EngineWarningLights");

                    b.Property<bool>("FluidsLeakingUnderBus");

                    b.Property<bool>("FuelGaugeWorking");

                    b.Property<bool>("OilLevelPressureGaugeWorking");

                    b.Property<string>("OtherEngineFluidLevels");

                    b.Property<bool>("PowerSteeringFluidLevel");

                    b.Property<bool>("RadiatorFluidLevel");

                    b.Property<bool>("TransmissionFluidLevel");

                    b.Property<bool>("WindshieldWiperFluid");

                    b.HasKey("EngineFluidLevelsId");

                    b.ToTable("EngineFluidLevels");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.ExteriorChecks", b =>
                {
                    b.Property<int>("ExteriorChecksId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BodyconditionScratchesDingsDents");

                    b.Property<bool>("BrakelightsBackUpLights");

                    b.Property<bool>("DirectionalSignalsFrontrear");

                    b.Property<bool>("ExteriorClean");

                    b.Property<bool>("FoglampsHazardlamps");

                    b.Property<bool>("HeadlightsHiLow");

                    b.Property<bool>("LuggageStoragedoorsEnginecompartmentPanels");

                    b.Property<bool>("LugnutsTight");

                    b.Property<string>("OtherExteriorChecks");

                    b.Property<bool>("TaillightsRunninglights");

                    b.Property<bool>("TireconditionAirpressure");

                    b.Property<bool>("WindowscanWindfreely");

                    b.Property<bool>("WindshieldCondition");

                    b.HasKey("ExteriorChecksId");

                    b.ToTable("ExteriorChecks");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("DriverDataId");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<long>("Length");

                    b.HasKey("ImageId");

                    b.HasIndex("DriverDataId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Inspector", b =>
                {
                    b.Property<int>("InspectorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfInspection");

                    b.Property<string>("InspectionPassed")
                        .IsRequired();

                    b.Property<string>("InspectorsGeneralRemarks");

                    b.Property<string>("NameOfInspector")
                        .IsRequired();

                    b.Property<string>("NameOfSupervisor")
                        .IsRequired();

                    b.Property<string>("PlaceOfInspection")
                        .IsRequired();

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired();

                    b.HasKey("InspectorId");

                    b.ToTable("Inspector");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.InteriorChecks", b =>
                {
                    b.Property<int>("InteriorChecksId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AirConditioning");

                    b.Property<bool>("CantheDoorsbeOpenedFreely");

                    b.Property<bool>("DestinationSignbox");

                    b.Property<bool>("DriverSeatBelts");

                    b.Property<bool>("Fans");

                    b.Property<bool>("FireExtinguisher");

                    b.Property<bool>("Horn");

                    b.Property<bool>("InteriorClean");

                    b.Property<bool>("InteriorLights");

                    b.Property<bool>("Mirrors");

                    b.Property<bool>("OtherEmergencyGear");

                    b.Property<string>("OtherInteriorChecks");

                    b.Property<bool>("ParkingBrake");

                    b.Property<bool>("PassengerSeats");

                    b.Property<bool>("RadioEquipmentCellphone");

                    b.Property<bool>("WastebinAvailableOrEmptied");

                    b.Property<bool>("WindowsCleanandcanWindFreely");

                    b.Property<bool>("WindshieldWipers");

                    b.HasKey("InteriorChecksId");

                    b.ToTable("InteriorChecks");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.ManagedBy", b =>
                {
                    b.Property<int>("ManagedById")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ManagedByName")
                        .IsRequired();

                    b.Property<string>("ManagedByNumber")
                        .IsRequired();

                    b.HasKey("ManagedById");

                    b.ToTable("ManagedBy");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Name", b =>
                {
                    b.Property<int>("NameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NickName");

                    b.HasKey("NameId");

                    b.ToTable("Name");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.NextOfKin", b =>
                {
                    b.Property<int>("NextOfKinId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NextOfKinFirstName")
                        .IsRequired();

                    b.Property<string>("NextOfKinHomeAddressLine1")
                        .IsRequired();

                    b.Property<string>("NextOfKinHomeAddressLine2");

                    b.Property<string>("NextOfKinHomeCity")
                        .IsRequired();

                    b.Property<string>("NextOfKinHomeCountry")
                        .IsRequired();

                    b.Property<string>("NextOfKinHomePostalCode");

                    b.Property<string>("NextOfKinHomeState")
                        .IsRequired();

                    b.Property<string>("NextOfKinLastName")
                        .IsRequired();

                    b.Property<string>("NextOfKinMiddleName");

                    b.Property<string>("NextOfKinPhoneNumber")
                        .IsRequired();

                    b.HasKey("NextOfKinId");

                    b.ToTable("NextOfKin");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfOwner")
                        .IsRequired();

                    b.Property<string>("OwnersHouseAddress")
                        .IsRequired();

                    b.Property<string>("OwnersMobileNo")
                        .IsRequired();

                    b.Property<string>("OwnersNextOfKinName");

                    b.HasKey("OwnerId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.RegisteredBy", b =>
                {
                    b.Property<int>("RegisteredById")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegisteredByName")
                        .IsRequired();

                    b.Property<string>("RegisteredByNumber")
                        .IsRequired();

                    b.HasKey("RegisteredById");

                    b.ToTable("RegisteredBy");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.SafetyTechnical", b =>
                {
                    b.Property<int>("SafetyTechnicalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HasSupervisorBeenNotified")
                        .IsRequired();

                    b.Property<int>("NoOfDefectsOnBus");

                    b.Property<string>("SafetyTechnicalGeneralRemarks")
                        .IsRequired();

                    b.HasKey("SafetyTechnicalId");

                    b.ToTable("SafetyTechnical");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChassisNo")
                        .IsRequired();

                    b.Property<string>("EngineNo")
                        .IsRequired();

                    b.Property<DateTime>("InsuranceExpiry");

                    b.Property<DateTime>("MOTExpiry");

                    b.Property<string>("VehicleMake")
                        .IsRequired();

                    b.Property<string>("VehicleType")
                        .IsRequired();

                    b.Property<string>("YearOfManufacture")
                        .IsRequired();

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.ApplicationUser", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.Name", "Name")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.ApplicationUser", "NameFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Driver", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.Address", "DriversHomeAddress")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.Driver", "DriversHomeAddressFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DryvaDriverVerification.Models.Address", "DriversPermanentAddress")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.Driver", "DriversPermanentAddressFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DryvaDriverVerification.Models.Name", "Name")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.Driver", "NameFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.DriverData", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.Driver", "Driver")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "DriverFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.EngineFluidLevels", "EngineFluidLevels")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "EngineFluidLevelsFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.ExteriorChecks", "ExteriorChecks")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "ExteriorChecksFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.Inspector", "Inspector")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "InspectorFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.InteriorChecks", "InteriorChecks")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "InteriorChecksFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.ManagedBy", "ManagedBy")
                        .WithMany()
                        .HasForeignKey("ManagedById");

                    b.HasOne("DryvaDriverVerification.Models.NextOfKin", "NextOfKin")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "NextOfKinFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.Owner", "Owner")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "OwnerFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.RegisteredBy", "RegisteredBy")
                        .WithMany()
                        .HasForeignKey("RegisteredById");

                    b.HasOne("DryvaDriverVerification.Models.SafetyTechnical", "SafetyTechnical")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "SafetyTechnicalFK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.Vehicle", "Vehicle")
                        .WithOne()
                        .HasForeignKey("DryvaDriverVerification.Models.DriverData", "VehicleFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DryvaDriverVerification.Models.Image", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.DriverData")
                        .WithMany("Images")
                        .HasForeignKey("DriverDataId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DryvaDriverVerification.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DryvaDriverVerification.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
